// By Morgan McGuire @morgan3d, http://graphicscodex.com
// https://www.shadertoy.com/view/4dS3Wd

Node<ValueNoise2D>

    Inputs:
        scale: vec2 = vec2(1.0, 1.0)
        octaves: float = 3.0
        offset: vec2 = vec2(0.0, 0.0)

    Outputs:
        noise: float

Source<RPU>

float hash(vec2 p) {
    vec3 p3 = fract(vec3(p.xyx) * 0.13);
    // FIX IN RPU: p3 += dot(p3, p3.yzx + 3.333);
    p3 += vec3(dot(p3, p3.yzx + 3.333));
    return fract((p3.x + p3.y) * p3.z);
}

float value2d(vec2 x) {
    vec2 i = floor(x);
    vec2 f = fract(x);

	// Four corners in 2D of a tile
	float a = hash(i);
    float b = hash(i + vec2(1.0, 0.0));
    float c = hash(i + vec2(0.0, 1.0));
    float d = hash(i + vec2(1.0, 1.0));

	// Same code, with the clamps in smoothstep and common subexpressions
	// optimized away.
    vec2 u = f * f * (3.0 - 2.0 * f);
	return mix(a, b, u.x) + (c - a) * u.y * (1.0 - u.x) + (d - b) * u.x * u.y;
}

export vec4 main(vec2 uv, vec2 resolution, vec2 scale, float octaves, vec2 offset) {
    vec2 x = uv * 20.0 / scale + offset;

	float v = 0.0;
	float a = 0.5;
	vec2 shift = vec2(100);
	// Rotate to reduce axial bias
    mat2 rot = mat2(cos(0.5), sin(0.5), -sin(0.5), cos(0.50));
	for (float i = 0.0; i < octaves; i+= 1.0) {
		v += a * value2d(x);
		x = rot * x * 2.0 + shift;
	    a *= 0.5;
	}
	return vec4(v);
}
